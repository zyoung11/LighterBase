// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const countLogs = `-- name: CountLogs :one
SELECT COUNT(*) FROM _log_
`

func (q *Queries) CountLogs(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countLogs)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createLog = `-- name: CreateLog :exec
INSERT INTO _log_ (log_text) VALUES (?)
`

func (q *Queries) CreateLog(ctx context.Context, logText string) error {
	_, err := q.db.ExecContext(ctx, createLog, logText)
	return err
}

const createSecurity = `-- name: CreateSecurity :exec
INSERT INTO _security_ (table_name, create_where, delete_where, update_where, view_where)
VALUES (?, ?, ?, ?, ?)
`

type CreateSecurityParams struct {
	TableName   string
	CreateWhere sql.NullString
	DeleteWhere sql.NullString
	UpdateWhere sql.NullString
	ViewWhere   sql.NullString
}

func (q *Queries) CreateSecurity(ctx context.Context, arg CreateSecurityParams) error {
	_, err := q.db.ExecContext(ctx, createSecurity,
		arg.TableName,
		arg.CreateWhere,
		arg.DeleteWhere,
		arg.UpdateWhere,
		arg.ViewWhere,
	)
	return err
}

const createSql = `-- name: CreateSql :exec
INSERT INTO _sqls_ (sql) VALUES (?)
`

func (q *Queries) CreateSql(ctx context.Context, argSql string) error {
	_, err := q.db.ExecContext(ctx, createSql, argSql)
	return err
}

const deleteSecurity = `-- name: DeleteSecurity :exec
DELETE FROM _security_ WHERE table_name = ?
`

func (q *Queries) DeleteSecurity(ctx context.Context, tableName string) error {
	_, err := q.db.ExecContext(ctx, deleteSecurity, tableName)
	return err
}

const deleteSql = `-- name: DeleteSql :exec
DELETE FROM _sqls_ WHERE id = ?
`

func (q *Queries) DeleteSql(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSql, id)
	return err
}

const getLatestSql = `-- name: GetLatestSql :one
SELECT id, sql FROM _sqls_ ORDER BY id DESC LIMIT 1
`

func (q *Queries) GetLatestSql(ctx context.Context) (Sqls, error) {
	row := q.db.QueryRowContext(ctx, getLatestSql)
	var i Sqls
	err := row.Scan(&i.ID, &i.Sql)
	return i, err
}

const getSecurityByTable = `-- name: GetSecurityByTable :one
SELECT id, table_name, create_where, delete_where, update_where, view_where
FROM _security_
WHERE table_name = ?
`

func (q *Queries) GetSecurityByTable(ctx context.Context, tableName string) (Security, error) {
	row := q.db.QueryRowContext(ctx, getSecurityByTable, tableName)
	var i Security
	err := row.Scan(
		&i.ID,
		&i.TableName,
		&i.CreateWhere,
		&i.DeleteWhere,
		&i.UpdateWhere,
		&i.ViewWhere,
	)
	return i, err
}

const listLogs = `-- name: ListLogs :many
SELECT id, log_text, created_at FROM _log_ ORDER BY id DESC LIMIT ? OFFSET ?
`

type ListLogsParams struct {
	Limit  int64
	Offset int64
}

func (q *Queries) ListLogs(ctx context.Context, arg ListLogsParams) ([]Log, error) {
	rows, err := q.db.QueryContext(ctx, listLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(&i.ID, &i.LogText, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSecurities = `-- name: ListSecurities :many
SELECT id, table_name, create_where, delete_where, update_where, view_where FROM _security_
`

func (q *Queries) ListSecurities(ctx context.Context) ([]Security, error) {
	rows, err := q.db.QueryContext(ctx, listSecurities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Security
	for rows.Next() {
		var i Security
		if err := rows.Scan(
			&i.ID,
			&i.TableName,
			&i.CreateWhere,
			&i.DeleteWhere,
			&i.UpdateWhere,
			&i.ViewWhere,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSqls = `-- name: ListSqls :many
SELECT id, sql FROM _sqls_
`

func (q *Queries) ListSqls(ctx context.Context) ([]Sqls, error) {
	rows, err := q.db.QueryContext(ctx, listSqls)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Sqls
	for rows.Next() {
		var i Sqls
		if err := rows.Scan(&i.ID, &i.Sql); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSecurity = `-- name: UpdateSecurity :exec
UPDATE _security_
SET create_where = ?, delete_where = ?, update_where = ?, view_where = ?
WHERE table_name = ?
`

type UpdateSecurityParams struct {
	CreateWhere sql.NullString
	DeleteWhere sql.NullString
	UpdateWhere sql.NullString
	ViewWhere   sql.NullString
	TableName   string
}

func (q *Queries) UpdateSecurity(ctx context.Context, arg UpdateSecurityParams) error {
	_, err := q.db.ExecContext(ctx, updateSecurity,
		arg.CreateWhere,
		arg.DeleteWhere,
		arg.UpdateWhere,
		arg.ViewWhere,
		arg.TableName,
	)
	return err
}

const updateSql = `-- name: UpdateSql :exec
UPDATE _sqls_
SET sql = ?
WHERE id = ?
`

type UpdateSqlParams struct {
	Sql string
	ID  int64
}

func (q *Queries) UpdateSql(ctx context.Context, arg UpdateSqlParams) error {
	_, err := q.db.ExecContext(ctx, updateSql, arg.Sql, arg.ID)
	return err
}

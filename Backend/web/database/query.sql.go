// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createProject = `-- name: CreateProject :one
INSERT INTO projects (
    user_id, project_name, project_avatar, project_description, project_size, create_at, update_at
) VALUES (
    ?, ?, ?, ?, ?, datetime('now'), datetime('now')
)
RETURNING project_id, user_id, port, project_name, project_avatar, project_description, project_size, create_at, update_at
`

type CreateProjectParams struct {
	UserID             int64
	ProjectName        string
	ProjectAvatar      sql.NullString
	ProjectDescription sql.NullString
	ProjectSize        sql.NullInt64
}

func (q *Queries) CreateProject(ctx context.Context, arg CreateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, createProject,
		arg.UserID,
		arg.ProjectName,
		arg.ProjectAvatar,
		arg.ProjectDescription,
		arg.ProjectSize,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Port,
		&i.ProjectName,
		&i.ProjectAvatar,
		&i.ProjectDescription,
		&i.ProjectSize,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    user_name, password_hash, email, user_avatar,
    create_at, update_at
) VALUES (
    ?, ?, ?, ?,
    datetime('now'), datetime('now')
)
RETURNING user_id, user_name, password_hash, email, user_avatar, create_at, update_at
`

type CreateUserParams struct {
	UserName     string
	PasswordHash string
	Email        string
	UserAvatar   sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.UserName,
		arg.PasswordHash,
		arg.Email,
		arg.UserAvatar,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.PasswordHash,
		&i.Email,
		&i.UserAvatar,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const deleteProject = `-- name: DeleteProject :exec
DELETE FROM projects WHERE project_id = ?
`

func (q *Queries) DeleteProject(ctx context.Context, projectID int64) error {
	_, err := q.db.ExecContext(ctx, deleteProject, projectID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE user_id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, userID int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, userID)
	return err
}

const getProjectByID = `-- name: GetProjectByID :one
SELECT project_id, user_id, port, project_name, project_avatar, project_description, project_size, create_at, update_at FROM projects WHERE project_id = ? LIMIT 1
`

func (q *Queries) GetProjectByID(ctx context.Context, projectID int64) (Project, error) {
	row := q.db.QueryRowContext(ctx, getProjectByID, projectID)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Port,
		&i.ProjectName,
		&i.ProjectAvatar,
		&i.ProjectDescription,
		&i.ProjectSize,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, user_name, password_hash, email, user_avatar, create_at, update_at FROM users
WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.PasswordHash,
		&i.Email,
		&i.UserAvatar,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT user_id, user_name, password_hash, email, user_avatar, create_at, update_at FROM users
WHERE user_id = ? LIMIT 1
`

func (q *Queries) GetUserByID(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.PasswordHash,
		&i.Email,
		&i.UserAvatar,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const getUserByName = `-- name: GetUserByName :one
SELECT user_id, user_name, password_hash, email, user_avatar, create_at, update_at FROM users
WHERE user_name = ? LIMIT 1
`

func (q *Queries) GetUserByName(ctx context.Context, userName string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByName, userName)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.PasswordHash,
		&i.Email,
		&i.UserAvatar,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const listAllProjectsForRestore = `-- name: ListAllProjectsForRestore :many
SELECT project_id, user_id, port, project_name, project_avatar, project_description, project_size, create_at, update_at FROM projects WHERE port IS NOT NULL
`

func (q *Queries) ListAllProjectsForRestore(ctx context.Context) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listAllProjectsForRestore)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.Port,
			&i.ProjectName,
			&i.ProjectAvatar,
			&i.ProjectDescription,
			&i.ProjectSize,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllUsers = `-- name: ListAllUsers :many
SELECT user_id, user_name, password_hash, email, user_avatar, create_at, update_at FROM users
`

func (q *Queries) ListAllUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserName,
			&i.PasswordHash,
			&i.Email,
			&i.UserAvatar,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProjectsByUserID = `-- name: ListProjectsByUserID :many
SELECT project_id, user_id, port, project_name, project_avatar, project_description, project_size, create_at, update_at FROM projects WHERE user_id = ? ORDER BY create_at DESC
`

func (q *Queries) ListProjectsByUserID(ctx context.Context, userID int64) ([]Project, error) {
	rows, err := q.db.QueryContext(ctx, listProjectsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Project
	for rows.Next() {
		var i Project
		if err := rows.Scan(
			&i.ProjectID,
			&i.UserID,
			&i.Port,
			&i.ProjectName,
			&i.ProjectAvatar,
			&i.ProjectDescription,
			&i.ProjectSize,
			&i.CreateAt,
			&i.UpdateAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProject = `-- name: UpdateProject :one
UPDATE projects
SET
    project_name = COALESCE(?, project_name),
    project_avatar = COALESCE(?, project_avatar),
    project_description = COALESCE(?, project_description),
    update_at = datetime('now')
WHERE project_id = ?
RETURNING project_id, user_id, port, project_name, project_avatar, project_description, project_size, create_at, update_at
`

type UpdateProjectParams struct {
	ProjectName        string
	ProjectAvatar      sql.NullString
	ProjectDescription sql.NullString
	ProjectID          int64
}

func (q *Queries) UpdateProject(ctx context.Context, arg UpdateProjectParams) (Project, error) {
	row := q.db.QueryRowContext(ctx, updateProject,
		arg.ProjectName,
		arg.ProjectAvatar,
		arg.ProjectDescription,
		arg.ProjectID,
	)
	var i Project
	err := row.Scan(
		&i.ProjectID,
		&i.UserID,
		&i.Port,
		&i.ProjectName,
		&i.ProjectAvatar,
		&i.ProjectDescription,
		&i.ProjectSize,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}

const updateProjectPort = `-- name: UpdateProjectPort :exec
UPDATE projects SET port = ? WHERE project_id = ?
`

type UpdateProjectPortParams struct {
	Port      sql.NullInt64
	ProjectID int64
}

func (q *Queries) UpdateProjectPort(ctx context.Context, arg UpdateProjectPortParams) error {
	_, err := q.db.ExecContext(ctx, updateProjectPort, arg.Port, arg.ProjectID)
	return err
}

const updateProjectSize = `-- name: UpdateProjectSize :exec
UPDATE projects SET project_size = ?, update_at = datetime('now') WHERE project_id = ?
`

type UpdateProjectSizeParams struct {
	ProjectSize sql.NullInt64
	ProjectID   int64
}

func (q *Queries) UpdateProjectSize(ctx context.Context, arg UpdateProjectSizeParams) error {
	_, err := q.db.ExecContext(ctx, updateProjectSize, arg.ProjectSize, arg.ProjectID)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    user_name = COALESCE(?, user_name),
    password_hash = COALESCE(?, password_hash),
    user_avatar = COALESCE(?, user_avatar),
    update_at = datetime('now')
WHERE user_id = ?
RETURNING user_id, user_name, password_hash, email, user_avatar, create_at, update_at
`

type UpdateUserParams struct {
	UserName     string
	PasswordHash string
	UserAvatar   sql.NullString
	UserID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.UserName,
		arg.PasswordHash,
		arg.UserAvatar,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserName,
		&i.PasswordHash,
		&i.Email,
		&i.UserAvatar,
		&i.CreateAt,
		&i.UpdateAt,
	)
	return i, err
}
